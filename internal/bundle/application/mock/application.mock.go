// Code generated by MockGen. DO NOT EDIT.
// Source: application.go

// Package application is a generated GoMock package.
package application

import (
	v1beta1 "github.com/caos/boom/api/v1beta1"
	name "github.com/caos/boom/internal/name"
	chart "github.com/caos/boom/internal/templator/helm/chart"
	logging "github.com/caos/orbiter/logging"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApplication is a mock of Application interface
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockApplication) Deploy(arg0 *v1beta1.ToolsetSpec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockApplicationMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockApplication)(nil).Deploy), arg0)
}

// GetName mocks base method
func (m *MockApplication) GetName() name.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(name.Application)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockApplicationMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockApplication)(nil).GetName))
}

// MockHelmApplication is a mock of HelmApplication interface
type MockHelmApplication struct {
	ctrl     *gomock.Controller
	recorder *MockHelmApplicationMockRecorder
}

// MockHelmApplicationMockRecorder is the mock recorder for MockHelmApplication
type MockHelmApplicationMockRecorder struct {
	mock *MockHelmApplication
}

// NewMockHelmApplication creates a new mock instance
func NewMockHelmApplication(ctrl *gomock.Controller) *MockHelmApplication {
	mock := &MockHelmApplication{ctrl: ctrl}
	mock.recorder = &MockHelmApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmApplication) EXPECT() *MockHelmApplicationMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockHelmApplication) Deploy(arg0 *v1beta1.ToolsetSpec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockHelmApplicationMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockHelmApplication)(nil).Deploy), arg0)
}

// GetName mocks base method
func (m *MockHelmApplication) GetName() name.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(name.Application)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockHelmApplicationMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockHelmApplication)(nil).GetName))
}

// GetNamespace mocks base method
func (m *MockHelmApplication) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockHelmApplicationMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockHelmApplication)(nil).GetNamespace))
}

// GetChartInfo mocks base method
func (m *MockHelmApplication) GetChartInfo() *chart.Chart {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartInfo")
	ret0, _ := ret[0].(*chart.Chart)
	return ret0
}

// GetChartInfo indicates an expected call of GetChartInfo
func (mr *MockHelmApplicationMockRecorder) GetChartInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartInfo", reflect.TypeOf((*MockHelmApplication)(nil).GetChartInfo))
}

// GetImageTags mocks base method
func (m *MockHelmApplication) GetImageTags() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageTags")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetImageTags indicates an expected call of GetImageTags
func (mr *MockHelmApplicationMockRecorder) GetImageTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageTags", reflect.TypeOf((*MockHelmApplication)(nil).GetImageTags))
}

// SpecToHelmValues mocks base method
func (m *MockHelmApplication) SpecToHelmValues(arg0 logging.Logger, arg1 *v1beta1.ToolsetSpec) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecToHelmValues", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SpecToHelmValues indicates an expected call of SpecToHelmValues
func (mr *MockHelmApplicationMockRecorder) SpecToHelmValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecToHelmValues", reflect.TypeOf((*MockHelmApplication)(nil).SpecToHelmValues), arg0, arg1)
}

// MockYAMLApplication is a mock of YAMLApplication interface
type MockYAMLApplication struct {
	ctrl     *gomock.Controller
	recorder *MockYAMLApplicationMockRecorder
}

// MockYAMLApplicationMockRecorder is the mock recorder for MockYAMLApplication
type MockYAMLApplicationMockRecorder struct {
	mock *MockYAMLApplication
}

// NewMockYAMLApplication creates a new mock instance
func NewMockYAMLApplication(ctrl *gomock.Controller) *MockYAMLApplication {
	mock := &MockYAMLApplication{ctrl: ctrl}
	mock.recorder = &MockYAMLApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockYAMLApplication) EXPECT() *MockYAMLApplicationMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockYAMLApplication) Deploy(arg0 *v1beta1.ToolsetSpec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockYAMLApplicationMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockYAMLApplication)(nil).Deploy), arg0)
}

// GetName mocks base method
func (m *MockYAMLApplication) GetName() name.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(name.Application)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockYAMLApplicationMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockYAMLApplication)(nil).GetName))
}

// GetYaml mocks base method
func (m *MockYAMLApplication) GetYaml(arg0 logging.Logger, arg1 *v1beta1.ToolsetSpec) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaml", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetYaml indicates an expected call of GetYaml
func (mr *MockYAMLApplicationMockRecorder) GetYaml(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaml", reflect.TypeOf((*MockYAMLApplication)(nil).GetYaml), arg0, arg1)
}
